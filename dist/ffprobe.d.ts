/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface FFprobe {
  program_version?: ProgramVersion;
  library_versions?: LibraryVersions;
  pixel_formats?: PixelFormats;
  packets?: Packets;
  frames?: Frames;
  packets_and_frames?: PacketsAndFrames;
  programs?: Programs;
  streams?: Streams;
  chapters?: Chapters;
  format?: Format;
  error?: Error;
}
export interface ProgramVersion {
  version: string;
  copyright: string;
  build_date?: string;
  build_time?: string;
  compiler_ident: string;
  configuration: string;
}
export interface LibraryVersions {
  library_version?: LibraryVersion[];
}
export interface LibraryVersion {
  name: string;
  major: number;
  minor: number;
  micro: number;
  version: number;
  ident: string;
}
export interface PixelFormats {
  pixel_format?: PixelFormatType[];
}
export interface PixelFormatType {
  flags?: PixelFormatFlagsType;
  components?: PixelFormatComponentsType;
  name: string;
  nb_components: number;
  log2_chroma_w?: number;
  log2_chroma_h?: number;
  bits_per_pixel?: number;
}
export interface PixelFormatFlagsType {
  big_endian: number;
  palette: number;
  bitstream: number;
  hwaccel: number;
  planar: number;
  rgb: number;
  alpha: number;
}
export interface PixelFormatComponentsType {
  component?: PixelFormatComponentType[];
}
export interface PixelFormatComponentType {
  index: number;
  bit_depth: number;
}
export interface Packets {
  packet?: PacketType[];
}
export interface PacketType {
  tag?: TagType[];
  side_data_list?: PacketSideDataListType;
  codec_type: string;
  stream_index: number;
  pts?: number;
  pts_time?: number;
  dts?: number;
  dts_time?: number;
  duration?: number;
  duration_time?: number;
  size: number;
  pos?: number;
  flags: string;
  data?: string;
  data_hash?: string;
}
export interface TagType {
  key: string;
  value: string;
}
export interface PacketSideDataListType {
  side_data: [PacketSideDataType, ...PacketSideDataType[]];
}
export interface PacketSideDataType {
  side_data_type?: string;
  side_data_size?: number;
}
export interface Frames {
  frame?: FrameType[];
  subtitle?: SubtitleType[];
}
export interface FrameType {
  tag?: TagType[];
  logs?: LogsType;
  side_data_list?: FrameSideDataListType;
  media_type: string;
  stream_index?: number;
  key_frame: number;
  pts?: number;
  pts_time?: number;
  pkt_pts?: number;
  pkt_pts_time?: number;
  pkt_dts?: number;
  pkt_dts_time?: number;
  best_effort_timestamp?: number;
  best_effort_timestamp_time?: number;
  pkt_duration?: number;
  pkt_duration_time?: number;
  pkt_pos?: number;
  pkt_size?: number;
  sample_fmt?: string;
  nb_samples?: number;
  channels?: number;
  channel_layout?: string;
  width?: number;
  height?: number;
  pix_fmt?: string;
  sample_aspect_ratio?: string;
  pict_type?: string;
  coded_picture_number?: number;
  display_picture_number?: number;
  interlaced_frame?: number;
  top_field_first?: number;
  repeat_pict?: number;
  color_range?: string;
  color_space?: string;
  color_primaries?: string;
  color_transfer?: string;
  chroma_location?: string;
}
export interface LogsType {
  log: [LogType, ...LogType[]];
}
export interface LogType {
  context?: string;
  level?: number;
  category?: number;
  parent_context?: string;
  parent_category?: number;
  message?: string;
}
export interface FrameSideDataListType {
  side_data: [FrameSideDataType, ...FrameSideDataType[]];
}
export interface FrameSideDataType {
  timecodes?: FrameSideDataTimecodeList;
  side_data_type?: string;
  side_data_size?: number;
  timecode?: string;
}
export interface FrameSideDataTimecodeList {
  timecode?: FrameSideDataTimecodeType[];
}
export interface FrameSideDataTimecodeType {
  value?: string;
}
export interface SubtitleType {
  media_type: "subtitle";
  pts?: number;
  pts_time?: number;
  format?: number;
  start_display_time?: number;
  end_display_time?: number;
  num_rects?: number;
}
export interface PacketsAndFrames {
  packet?: PacketType[];
  frame?: FrameType[];
  subtitle?: SubtitleType[];
}
export interface Programs {
  program?: ProgramType[];
}
export interface ProgramType {
  tag?: TagType[];
  streams?: Streams;
  program_id: number;
  program_num: number;
  nb_streams: number;
  start_time?: number;
  start_pts?: number;
  end_time?: number;
  end_pts?: number;
  pmt_pid: number;
  pcr_pid: number;
}
export interface Streams {
  stream?: StreamType[];
}
export interface StreamType {
  disposition?: StreamDispositionType;
  tag?: TagType[];
  side_data_list?: PacketSideDataListType;
  index: number;
  codec_name?: string;
  codec_long_name?: string;
  profile?: string;
  codec_type?: string;
  codec_tag: string;
  codec_tag_string: string;
  extradata?: string;
  extradata_hash?: string;
  width?: number;
  height?: number;
  coded_width?: number;
  coded_height?: number;
  closed_captions?: boolean;
  has_b_frames?: number;
  sample_aspect_ratio?: string;
  display_aspect_ratio?: string;
  pix_fmt?: string;
  level?: number;
  color_range?: string;
  color_space?: string;
  color_transfer?: string;
  color_primaries?: string;
  chroma_location?: string;
  field_order?: string;
  refs?: number;
  sample_fmt?: string;
  sample_rate?: number;
  channels?: number;
  channel_layout?: string;
  bits_per_sample?: number;
  id?: string;
  r_frame_rate: string;
  avg_frame_rate: string;
  time_base: string;
  start_pts?: number;
  start_time?: number;
  duration_ts?: number;
  duration?: number;
  bit_rate?: number;
  max_bit_rate?: number;
  bits_per_raw_sample?: number;
  nb_frames?: number;
  nb_read_frames?: number;
  nb_read_packets?: number;
}
export interface StreamDispositionType {
  default: number;
  dub: number;
  original: number;
  comment: number;
  lyrics: number;
  karaoke: number;
  forced: number;
  hearing_impaired: number;
  visual_impaired: number;
  clean_effects: number;
  attached_pic: number;
  timed_thumbnails: number;
}
export interface Chapters {
  chapter?: ChapterType[];
}
export interface ChapterType {
  tag?: TagType[];
  id: number;
  time_base: string;
  start: number;
  start_time?: number;
  end: number;
  end_time: number;
}
export interface Format {
  tag?: TagType[];
  filename: string;
  nb_streams: number;
  nb_programs: number;
  format_name: string;
  format_long_name?: string;
  start_time?: number;
  duration?: number;
  size?: number;
  bit_rate?: number;
  probe_score?: number;
}
export interface Error {
  code: number;
  string: string;
}
